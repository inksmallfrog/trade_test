'use strict';

const isNumber = subject => typeof subject === 'number';

// Dynamic Weighted Moving Average

// @param {Number|Array.<Number>} alpha

// Smoothed moving average

// Exponential moving average with 86% total weight

// simple moving average

var ma = (data, size) => {
  const length = data.length;

  if (!size) {
    return data.reduce((a, b) => a + b) / length
  }

  if (size <= 1) {
    return data.slice()
  }

  if (size > length) {
    return Array(length)
  }

  const prepare = size - 1;
  const ret = [];
  let sum = 0;
  let i = 0;
  let counter = 0;
  let datum;

  for (; i < length && counter < prepare; i ++) {
    datum = data[i];

    if (isNumber(datum)) {
      sum += datum;
      counter ++;
    }
  }

  for (; i < length; i ++) {
    datum = data[i];

    if (isNumber(datum)) {
      sum += datum;
    }

    if (isNumber(data[i - size])) {
      sum -= data[i - size];
    }

    ret[i] = sum / size;
  }

  return ret
};

// Weighted moving average

var index = ((data, size) => {
  const length = data.length;
  const avg = ma(data, size);
  const ret = [];

  let i = size - 1;
  let j;
  let sum;

  for (; i < length; i++) {
    sum = 0;
    j = i - size + 1;

    for (; j <= i; j++) {
      sum += Math.pow(data[j] - avg[i], 2);
    }

    ret[i] = Math.sqrt(sum / size);
  }

  return ret;
});

module.exports = index;
